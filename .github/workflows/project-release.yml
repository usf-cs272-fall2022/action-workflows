name: 'Project Release'

on:
  workflow_call:
    inputs:
      release_tag:
        description: "Project release version number or tag (e.g. v1.0.0)"
        required: false
        type: string

env:
  USER_PATH: 'project-main'
  TEST_PATH: 'project-tests'
  JSON_NAME: 'release-results'

jobs:
  parse_version:
    name: 'Parse Version'
    runs-on: ubuntu-latest
    timeout-minutes: 1

    env:
      RELEASE_TAG: "${{ inputs.release_tag }}"

    steps:
      - name: 'Checkout workflows'
        id: checkout-workflows
        uses: actions/checkout@v3
        with:
          repository: usf-cs272-fall2022/action-workflows
          path: 'workflows'

      - name: 'Parse release tag'
        id: parse_release
        uses: actions/github-script@v6
        with:
          script: |
            const script = require('./workflows/scripts/parse-version.js');
            return await script({github, context, core});

      - name: 'Generate cache keys'
        id: make_keys
        run: |
          USER_SHA=${{ github.sha }}
          echo "User SHA: ${USER_SHA}"
          echo "::set-output name=user_cache::${USER_PATH}-${USER_SHA}"

          TEST_SHA=$(git ls-remote --refs https://github.com/${{ github.repository_owner }}/${TEST_PATH}.git main | head -1 | cut -f 1)
          echo "Test SHA: ${TEST_SHA}"
          echo "::set-output name=test_cache::${TEST_PATH}-${TEST_SHA}"

    outputs:
      version_major: '${{ steps.parse_release.outputs.version_major }}'
      version_minor: '${{ steps.parse_release.outputs.version_minor }}'
      version_patch: '${{ steps.parse_release.outputs.version_patch }}'

      release_tag: '${{ steps.parse_release.outputs.release_tag }}'

      user_cache: '${{ steps.make_keys.outputs.user_cache }}'
      test_cache: '${{ steps.make_keys.outputs.test_cache }}'

  check_version:
    name: 'Check Version'
    runs-on: ubuntu-latest
    needs: ['parse_version']
    timeout-minutes: 5

    steps:
      - name: 'Check version'
        run: echo "Hello"

  check_compile:
    name: 'Check Compiles'
    runs-on: ubuntu-latest
    needs: ['parse_version']
    timeout-minutes: 1

    env:
      USER_CACHE: '${{ needs.parse_version.outputs.user_cache }}'
      TEST_CACHE: '${{ needs.parse_version.outputs.test_cache }}'

    steps:
      - name: 'Setup project code'
        run: echo "Hello"

      - name: 'Compile source code' 
        run: echo "Hello"

      - name: 'Compile test code' 
        run: echo "Hello"

  check_tests:
    name: 'Check Current Tests'
    runs-on: ubuntu-latest
    needs: ['parse_version', 'check_compile']
    timeout-minutes: 10

    steps:
      - name: 'Setup project code'
        run: echo "Hello"

      - name: 'Compile project code' 
        run: echo "Hello"

      - name: 'Run current project tests' 
        run: echo "Hello"

  check_next:
    name: 'Check Past/Next Tests'
    runs-on: ubuntu-latest
    needs: ['parse_version', 'check_compile']
    timeout-minutes: 10

    steps:
      - name: 'Setup project code'
        run: echo "Hello"

      - name: 'Compile project code' 
        run: echo "Hello"

      - name: 'Run previous project tests' 
        run: echo "Hello"

      - name: 'Run next project tests' 
        run: echo "Hello"

  check_warnings:
    name: 'Check Warnings'
    runs-on: ubuntu-latest
    needs: ['parse_version', 'check_compile']
    timeout-minutes: 1

    steps:
      - name: 'Fetch source code' 
        run: echo "Hello"

      - name: 'Check for compile warnings' 
        run: echo "Hello"

      - name: 'Check for Javadoc warnings' 
        run: echo "Hello"

  check_style:
    name: 'Check Style'
    runs-on: ubuntu-latest
    needs: ['parse_version']
    timeout-minutes: 1

    steps:
      - name: 'Fetch source code' 
        run: echo "Hello"

      - name: 'Check for TODO comments' 
        run: echo "Hello"

      - name: 'Check for stack traces' 
        run: echo "Hello"

      - name: 'Check for extra main methods' 
        run: echo "Hello"

  save_results:
    name: 'Save Results'
    runs-on: ubuntu-latest
    needs: ['parse_version', 'check_version', 'check_compile', 'check_tests', 'check_next', 'check_warnings', 'check_style']
    if: ${{ always() }}
    timeout-minutes: 1

    steps:
      - name: 'Save results to JSON'
        run: echo "Hello"

  update_release:
    name: 'Update Release'
    runs-on: ubuntu-latest
    needs: ['parse_version', 'check_version', 'check_compile', 'check_tests', 'check_next', 'check_warnings', 'check_style']
    if: ${{ always() }}
    timeout-minutes: 1

    steps:
      - name: 'Update release description'
        run: echo "Hello"
